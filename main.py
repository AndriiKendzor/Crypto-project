#-- imports --
from selenium import webdriver
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from datetime import datetime
import time
from multiprocessing import Queue

#-- parsing settings --
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±–¥—Ä–∞–π–≤–µ—Ä–∞
options = webdriver.ChromeOptions()
options.add_argument("--headless")  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ headless-—Ä–µ–∂–∏–º—ñ (–æ–ø—Ü—ñ–π–Ω–æ)
options.add_argument("--disable-gpu")
options.add_argument("--no-sandbox")

# –ó–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ChromeDriver
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=options)



#-- correct format for price --
def parse_price(price_str):
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    clean_str = price_str.replace("(", "").replace(")", "").replace("$", "").replace(",", "").replace("<", "")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–Ω–∏–∫–∏ (M = –º—ñ–ª—å–π–æ–Ω–∏, B = –º—ñ–ª—å—è—Ä–¥–∏)
    if "M" in clean_str:
        return float(clean_str.replace("M", "")) * 1000000
    elif "B" in clean_str:
        return float(clean_str.replace("B", "")) * 1000000000
    else:
        return float(clean_str)


#-- get transactions data --
def get_data_from_user(address, queue):
    # URL —Å—Ç–æ—Ä—ñ–Ω–∫–∏ DeBank
    url = f"https://debank.com/profile/{address}/history"  # –í—Å—Ç–∞–≤—Ç–µ —Ä–µ–∞–ª—å–Ω—É –∞–¥—Ä–µ—Å—É
    # –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    driver.get(url)

    try:
        # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—è–≤–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
        first_transaction = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'History_tableLine')]"))
        )
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ø–µ—Ä—à–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
        time_of_tx = first_transaction.find_element(By.XPATH, ".//div[contains(@class, 'History_sinceTime')]").text
        amount = first_transaction.find_element(By.XPATH, ".//span[contains(@class, 'ChangeTokenList_tokenPrice')]").text
        token = first_transaction.find_element(By.XPATH, ".//span[contains(@class, 'ChangeTokenList_tokenName')]").text

        # –û–±—Ä–æ–±–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ parse_price
        parsed_amount = parse_price(amount)
        # –í–∏–≤–µ–¥–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ—ó —Ü—ñ–Ω–∏

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä—ñ–≥
        if parsed_amount > 1000:
            message = f"üö® High Transaction Alert üö®\nUSER: {address}\n Token: {token}\nAmount: {parsed_amount:.2f} $\n Time: {time_of_tx}"
            send_message_to_telegram(queue, message)

        print(f"Time: {time_of_tx}, Amount: {parsed_amount:.2f} $, Token: {token}")
        print("-------------")
    except Exception as e:
        print(f"Error while parsing: {e}")



#-- get addresses --
def get_addresses(file_path):
    try:
        # –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª —ñ –∑—á–∏—Ç–∞—Ç–∏ –≤—Å—ñ —Ä—è–¥–∫–∏
        with open(file_path, "r") as file:
            addresses = file.readlines()

        # –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–π–≤—ñ —Å–∏–º–≤–æ–ª–∏ (–ø—Ä–æ–±—ñ–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫)
        addresses = [address.strip() for address in addresses]
        return addresses

    except FileNotFoundError:
        print(f"File not found: {file_path}")
        return []

    except Exception as e:
        print(f"An error occurred: {e}")
        return []

# -- send message to Telegram --
def send_message_to_telegram(queue, message):
    queue.put(message)
    print("massage to tg")



#-- run --
def run_parser(queue):
    file_path = "address.txt"
    try:
        while True:
            addresses = get_addresses(file_path)
            for address in addresses:
                current_time = datetime.now()
                formatted_time = current_time.strftime("%m-%d %H:%M")
                print(f"/ {formatted_time} / USER: {address}")
                get_data_from_user(address, queue)
            print("---BREAK---")
            time.sleep(5 * 60)
    except KeyboardInterrupt:
        print("–ü—Ä–æ–≥—Ä–∞–º—É –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.")
    finally:
        driver.quit()
